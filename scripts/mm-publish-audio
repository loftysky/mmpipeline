#!/usr/bin/env python

import argparse
import re
import os
import hashlib

from sgfs import SGFS
from sgpublish import Publisher


parser = argparse.ArgumentParser()
parser.add_argument('-d', '--description')
parser.add_argument('-D', '--debug', action='store_true',
    help='Go to the sandbox.')
parser.add_argument('-n', '--dry-run', action='store_true',
    help='Dont do anything.')

parser.add_argument('audio_files', nargs='+')
args = parser.parse_args()


sgfs = SGFS()
sg = sgfs.session


project = {'type': 'Project', 'id': 68 if args.debug else 74}

for path in args.audio_files:

    print path

    name, ext = os.path.splitext(os.path.basename(path))
    m = re.search(r'sq(\d{2})_s[hc](\d{2})', name, re.I)

    if not m:
        print '\tCould not parse filename:', name
        continue

    shot_code = 'Sq%s_Sh%s' % m.groups()
    shot = sg.find_one('Shot', [
        ('project', 'is', project),
        ('code', 'is', shot_code),
    ])
    if not shot:
        print '\tCould not find shot.'
        continue
    print '   ', shot

    task = sg.find_one('Task', [
        ('entity', 'is', shot),
        ('step.Step.short_name', 'is', 'audio'),
    ])
    if not task:
        print '\tCould not find "audio" task.'
        continue
    print '   ', task

    pubs = sg.find('PublishEvent', [
        ('sg_link', 'is', task),
        ('sg_type', 'is', 'audio_proxy'),
    ], ['sg_path', 'sg_version'])
    if pubs:
        pubs.sort(key=lambda p: p['sg_version'])
        pub = pubs[-1]
        print '   ', pub
        existing_md5 = hashlib.md5(open(pub['sg_path'], 'rb').read()).hexdigest()
        new_md5 = hashlib.md5(open(path, 'rb').read()).hexdigest()
        if existing_md5 == new_md5:
            print '   MD5 matches previous publish!'
            continue


    if args.dry_run:
        continue

    with Publisher(link=task, name='dialogue', type='audio_proxy') as publisher:
        publisher.description = args.description
        publisher.path = publisher.add_file(path)

    print '   ', publisher.entity
